{"version":3,"sources":["components/Fallback/Fallback.tsx","components/ErrorView/ErrorView.tsx","helpers/utils/useArea.ts","components/Game/Game.tsx","components/Area/Cell.tsx","components/Area/Area.tsx","helpers/constants/apiUrl.ts","App.tsx","index.tsx"],"names":["Fallback","className","ErrorView","error","AreaCell","pos","state","this","AreaMap","size","map","i","push","k","x","y","toggle","area","useArea","GameMode","useState","setMap","useEffect","toggleCell","useCallback","newMap","copy","Cell","cell","classNames","active","onMouseEnter","Area","handleHover","handleToggle","row","rowI","cellI","Game","props","fetchAppMode","a","axios","get","process","data","setState","appModes","selectOptions","value","easyMode","label","normalMode","hardMode","handleSelectChange","option","currentMode","history","_","prevState","placeholder","options","onChange","field","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8b500c9.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Fallback() {\n  return (\n    <div className=\"fallback\">\n      Loading ...\n    </div>\n  )\n}\n\nexport default Fallback\n","import React from 'react'\n\nconst ErrorView: React.FunctionComponent<{error: any}> = ({error}) => {\n  return (\n    <div className=\"error_view\">\n      {error}\n    </div>\n  )\n}\n\nexport default ErrorView\n","import { useCallback, useEffect, useState } from \"react\";\n\nexport interface Pos {\n  x: number;\n  y: number;\n}\n\nexport type AreaMapToggleFunc = (x:number, y:number)=>boolean\n\nexport class AreaCell{\n  #state: boolean;\n  #pos: Pos;\n  constructor(pos: Pos, state: boolean = false){\n    this.#state = state;\n    this.#pos = pos;\n  }\n  toggle():boolean{\n    this.#state = !this.#state;\n    return this.#state;\n  }\n  get state(){\n    return this.#state;\n  }\n  get pos():Pos{\n    return this.#pos;\n  }\n}\n\nexport class AreaMap{\n  #map: Array<Array<AreaCell>>;\n  readonly size: number;\n  constructor(size: number, map?:Array<Array<AreaCell>>){\n    this.size = size;\n    if(map){\n      this.#map = map;\n    }else{\n      this.#map = [];\n      for(let i=0; i<size; i++){\n        this.#map.push([]);\n        for(let k=0; k<size; k++){\n          this.#map[i].push(new AreaCell({ x: k, y: i }));\n        }\n      }\n    }\n  }\n  static copy(area: AreaMap,){\n    return new AreaMap(area.size, area.map);\n  }\n  get map():Array<Array<AreaCell>>{\n    return this.#map;\n  }\n  toggleCell(x: number, y: number){\n    return this.#map[y][x].toggle()\n  }\n}\n\ninterface UseAreaResult{\n  map: AreaMap, \n  toggleCell: AreaMapToggleFunc\n}\n\nfunction useArea(size: number): UseAreaResult {\n  const [map, setMap] = useState<AreaMap>(new AreaMap(size));\n\n  useEffect(() => {\n    setMap(new AreaMap(size));\n  }, [size, setMap]);\n\n  const toggleCell = useCallback((x, y)=>{\n    const newMap = AreaMap.copy(map);\n    setMap(newMap);\n    return newMap.toggleCell(x, y);\n  }, [map]);\n\n  return {\n    map,\n    toggleCell,\n  }\n}\n\nexport default useArea;","import { Component } from 'react'\nimport axios from 'axios'\nimport { API_URL } from '../../helpers/constants/apiUrl'\nimport Fallback from '../Fallback/Fallback';\nimport ErrorView from '../ErrorView/ErrorView';\nimport Area from '../Area/Area';\nimport Select from 'react-select';\n\nimport './Game.css';\n\nenum GameMode {\n  easyMode=\"easyMode\",\n  normalMode=\"normalMode\",\n  hardMode=\"hardMode\",\n}\n\ninterface AppModes {\n  easyMode: {\n    field: number;\n  },\n  normalMode: {\n    field: number;\n  },\n  hardMode: {\n    field: number;\n  }\n}\n\n\ninterface IGameProps {\n}\n\ninterface IGameState {\n  appModes: null | AppModes,\n  currentMode: GameMode | null,\n  error: any,\n  history: Array<{x: number, y: number}>\n}\n\nexport class Game extends Component<IGameProps, IGameState> {\n\n  constructor(props: IGameProps){\n    super(props)\n    this.state = {\n      appModes: null,\n      currentMode: null,\n      error: null,\n      history: []\n    };\n  }\n\n  fetchAppMode = async ()=>{\n    try {\n      const {data} = await axios.get<AppModes>(API_URL);\n      this.setState({\n        appModes: data\n      });\n    } catch (error) {\n      this.setState({error});\n    }\n  }\n\n  componentDidMount(){\n    this.fetchAppMode();\n  }\n  componentDidUpdate(_: IGameProps, prevState: IGameState){\n    if(prevState.currentMode !== this.state.currentMode){\n      this.setState({ history: [] });\n    }\n  }\n\n  readonly selectOptions: ReadonlyArray<{value: string, label: string}> = [\n    {value: GameMode.easyMode, label: \"Easy\"},\n    {value: GameMode.normalMode, label: \"Normal\"},\n    {value: GameMode.hardMode, label: \"Hard\"},\n  ]\n\n  handleSelectChange = (option:any)=>{\n    this.setState({\n      currentMode: option?.value || null,\n    });\n  }\n\n  handleHover = (x: number, y: number)=>{\n    this.state.history.push({x,y});\n    this.setState({});\n  }\n\n  render() {\n    const { appModes, currentMode, error } = this.state;\n    if(!this.state.appModes) return <Fallback/>;\n    if(error) return <ErrorView error={error}/>;\n    return (\n      <div className=\"game\">\n        <div className=\"game__left\">\n        <div className=\"app_mode\">\n          <p className=\"app_mode__header\">App mode:</p>\n          <Select\n            placeholder=\"Select app mode...\"\n            className=\"app_mode__select\"\n            options={this.selectOptions}\n            onChange={this.handleSelectChange}\n          />\n        </div>\n        {!!currentMode && <Area handleHover={this.handleHover} size={appModes?.[currentMode].field}/>}\n        </div>\n        <div className=\"game__right game_history\">\n          <h3 className=\"game_history__header\">Hover Squares</h3>\n          <ul className=\"game_history__list\">\n            {this.state.history.map(({x, y}, i)=>(\n              <li \n                className=\"game_history__item\"\n                key={`game_history__item-${i}`}\n              >\n                {`Row ${y} Col ${x}`}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Game\n","import React from 'react'\nimport { AreaCell, AreaMapToggleFunc } from '../../helpers/utils/useArea';\nimport classNames from 'classnames';\n\ninterface ICellProps{\n  cell: AreaCell,\n  toggleCell: AreaMapToggleFunc,\n}\n\nconst Cell:React.FunctionComponent<ICellProps> = ({\n  cell,\n  toggleCell\n}) => {\n  const toggle = ()=>toggleCell(cell.pos.x, cell.pos.y);\n  return (\n    <div \n      className={classNames(\"area__cell\", { active: cell.state })}\n      onMouseEnter={toggle}\n    />\n  );\n}\n\nexport default Cell\n","import React from 'react';\nimport useArea from '../../helpers/utils/useArea';\nimport Cell from './Cell';\n\nimport './Area.css';\n\n// const createMap = (size) => Array(size).fill(Array(size).fill(false));\n\ninterface IAreaProps{\n  size?: number;\n  handleHover?: (x:number, y:number)=>void;\n}\n\nconst Area: React.FunctionComponent<IAreaProps> = ({ size=0, handleHover }) => {\n  const { map: area, toggleCell } = useArea(size);\n  const handleToggle = (x: number, y:number)=>{\n    if(handleHover)handleHover(x, y);\n    return toggleCell(x, y);\n  }\n  return (\n    <div className=\"area\">\n      {area.map.map((row, rowI)=>(\n        <div \n          className=\"area__row\" \n          key={`area-row-${rowI}`}\n        >\n          {row.map((cell, cellI)=>(\n            <Cell \n              key={`area-row-${rowI}-cell-${cellI}`} \n              cell={cell} \n              toggleCell={handleToggle}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Area;","export const API_URL: string = process.env.REACT_APP_API_URL || 'https://demo1030918.mockable.io';","// import React from 'react';\nimport Game from './components/Game/Game';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}